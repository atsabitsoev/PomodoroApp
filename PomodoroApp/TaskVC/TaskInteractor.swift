//
//  TaskInteractor.swift
//  PomodoroApp
//
//  Created Ацамаз on 07/01/2019.
//  Copyright © 2019 a.s.bitsoev. All rights reserved.
//
//  Template generated by Juanpe Catalán @JuanpeCMiOS
//

import UIKit
var timer: Timer?

class TaskInteractor: TaskInteractorProtocol {
    
    
    weak var presenter: TaskPresenterProtocol?
    
    
    var timeRest = 0 {
        didSet {
            presenter?.prepareTimeRest(timeRest: timeRest)
        }
    }
    
    
    
    
    func getArrayOfTasks() -> [Task]? {
        return CoreDataService.standard.arrayofTasks()
    }
    
    
    // TIMER
    func startTimer() {
        
        print("start timer")
        
        if let timer = timer {
            timer.invalidate()
        }
        timer = nil
        let enabled = UserDefaults.standard.bool(forKey: "timerEnabled")
        let triggerDate: Date?
        
        if !enabled {
            
            triggerDate = Date(timeIntervalSinceNow: TimeInterval(Settings.standard.sumMinutes * 60))
            UserDefaults.standard.set(triggerDate, forKey: "triggerDate")
            UserDefaults.standard.set(true, forKey: "timerEnabled")
            
        } else {
            
            triggerDate = UserDefaults.standard.object(forKey: "triggerDate") as! Date?
            
        }
        
        print(triggerDate ?? "nodate")
        
        if Date() > triggerDate! {
            
            timeRest = 0
            stopTimer()
            timeRest = Settings.standard.sumMinutes * 60
            return
            
        }
        
        UNService.standard.deleteAllNotifications()
        UNService.standard.createNotifications(triggerDate: triggerDate!)
        
        timeRest = Int(DateInterval(start: Date(), end: triggerDate!).duration)
            
        timer = Timer.scheduledTimer(withTimeInterval: 1, repeats: true) { (timer) in
            print(self.timeRest)
            self.timeRest -= 1
            
            if self.timeRest <= 0 {
                self.timeRest = 0
                self.stopTimer()
            }
            
        }
        
    }
    
    
    func stopTimer() {
        
        print("stop timer")
        let enabled = UserDefaults.standard.bool(forKey: "timerEnabled")
        if enabled {
            let taskName = presenter!.currentTask
            var timeToAdd = 0
            
            if timeRest <= Settings.standard.relaxMinutes * 60 {
                
                timeToAdd = Settings.standard.workMinutes * 60
                
            } else {
                
                timeToAdd = Settings.standard.sumMinutes * 60 - timeRest
                
            }
            
            CoreDataService.standard.addTimeToTask(name: taskName, timeToAdd: timeToAdd)
            NotificationCenter.default.post(name: NSNotification.Name("updateTable"), object: nil)
        }
        
        UNService.standard.deleteAllNotifications()
        
        UserDefaults.standard.removeObject(forKey: "triggerDate")
        UserDefaults.standard.removeObject(forKey: "timerEnabled")
        UserDefaults.standard.removeObject(forKey: "timerPaused")
        if let timer = timer {
            timer.invalidate()
        }
        timer = nil
        
    }
    
    
    func pauseTimer() {
        
        UserDefaults.standard.set(true, forKey: "timerPaused")
        UserDefaults.standard.set(timeRest, forKey: "timeRest")
        UserDefaults.standard.removeObject(forKey: "triggerDate")
        if let timer = timer {
           timer.invalidate()
        }
        
        UNService.standard.deleteAllNotifications()
        
    }
    
    
    func resumeTimer() {
        
        UserDefaults.standard.set(false, forKey: "timerPaused")
        let timeRest = UserDefaults.standard.integer(forKey: "timeRest")
        let triggerDate = Date(timeIntervalSinceNow: Double(timeRest))
        UserDefaults.standard.set(triggerDate, forKey: "triggerDate")
        
        UNService.standard.createNotifications(triggerDate: triggerDate)
        startTimer()
        
    }
    
    
    func getTimeRest() {
        
        timeRest = UserDefaults.standard.integer(forKey: "timeRest")
        
    }
    
}
